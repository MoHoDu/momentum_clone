# 값으로서의 함수와 콜백

# 값으로서의 함수

>자바스크립트에서는 함수도 객체
- 함수는 값!
let a = value(값)
값: 어떤 변수에 담을 수 있음

거의 모든 언어가 함수를 가지고 있지만 
자바스크립트의 함수가 다른 점은 함수가 값이 될 수 있다는 점이다

function() {};
--> var a = function(){};   <-- 함수

>객체 속 키의 값으로 저장될 수도 있다.
a = {
    b: function(){          <-- 메소드

    }
}

key인 b는 객체 안에서 일종의 변수 역할을 하고 있음
이를 다른 말로 속성, property라고 한다.

이에 저장되어 있는 값이 함수라고 한다면
이를 메소드(method)라고 부른다.

>다른 함수의 인자로도 쓰일 수 있음
function cal(func, num){
    return func(num)    <-- 첫번째 인자인 함수 호출하면서
}                           두번째 인자를 해당 함수의 인자로
function increase(num){
    return num+1
}
function decrease(num){
    return num-1
}
alert(cal(increase, 1));
alert(cal(decrease, 1));

>함수는 리턴 값으로도 가능
function cal(mode){
    var funcs = {
        'plus' : function(left, right){return left + right},
        'minus' : function(left, right){return left - right}
    }
    return funcs[mode];
}
alert(cal('plus')(2,1));
--> cal('plus') 
--> return func['plus']
--> return function(left, right)
--> feturn function(2, 1) --> return 2 + 1 --> 3
alert(cal('minus')(2,1));

>배열로도 가능
var process = [
    function(input) {return input + 10;},
    function(input) {return input * input;},
    function(input) {return input / 2;}
];
var input = 1;
for (var i = 0; i < process.length; i++) {
    input = process[i](input);
}
alert(input);
--> i가 0부터 1씩 증가하면서 함수를 하나씩 호출
--> 전역 변수인 input을 인자로 하여 함수를 호출
--> 리턴 값으로 input의 값이 변경
--> 다시 i가 증가
--> 변경된 input을 인자로 두 번째 함수 호출
--> input 변경... i 증가... 호출.. 변경...

---> 최종적으로 바뀐 input 값을 alert로 호출

함수가 어디에 사용?
- 변수
- 함수의 매개변수
- 리턴값
---> 이런 용도로 사용될 수 있는 데이터를 컴퓨터에서는..
     first-class citizen(object/value)라고 부름.

함수는 곧 first-class citizen(object/value)이다.

----------------------------------------------
# 콜백
- 값으로서의 함수

함수가 수신하는 인자가 함수인 경우가 콜백

배열을 정리하는 경우
function sortNumber(a,b){
    // 위의 예제와 비교해서 a와 b의 순서를 바꾸면 정렬순서가 반대가 된다.
    return b-a;
}
var numbers = [20, 10, 9,8,7,6,5,4,3,2,1];
alert(numbers.sort(sortNumber)); // array, [20,10,9,8,7,6,5,4,3,2,1]
--> numbers(.앞은 객체!--> 객체 배열).sort();
--> 여기서 sort는 객체에 속해있기 때문에 메소드 
--> 자바스크립트가 기본적으로 가지고 있는 내장 메소드, 객체
    혹은 빌트인 메소드, 객체 라고 한다.
<-> 사용자 정의 객체, 메소드: 우리가 만드는 객체, 메소드

number.sort(); // [1, 10, 2, 20, ....]
--> 문자 순으로 정렬된 것을 확인할 수 있음.
--> sort는 인자로 sortfunc라는 함수를 받음.
--> 배열로 return 

sortfunc 만들기
--> sortfunc으로 기대되는 포맷을 지켜줘야 함.
function sortNumber(a,b){console.log(a, b);}
numbers.sort(sortNumber);
// 20 1, 20 6.....

--> 두 개의 값을 비교해서 양수인지 0인지 음수인지를 주면 됨
function sortNumber(a,b){
    if(a > b) {
        return 1;
    } else if(a < b) {
        return -1;
    } else {
        return 0;
    }
}
--> 더 간단하게 가능함.
function sortNumber(a,b){
    return a-b;
    // return b-a; <-- 역순으로 하고 싶다면
}

---> 이 sortfunc 함수가 바로 콜백함수!!
    - 콜백함수를 인자로 받는 메소드가 콜백함수를 인자로 받아서
    - 해당 메소드의 결과를 완전히 바꿀 수 있다.
    - 역시나 자바스크립트의 함수가 값이기 때문에 가능한 것이다.

> 비동기 처리
--> 어떤 홈페이지를 운영
--> 만명 정도의 구독자
--> 내가 글을 작성하면 구독자들에게 이메일 발송
    : 서버 관리해본 사람들은 쉽지 않다는 것을 알고 있음....
--> 한 명한테 보낼 때마다 1초면... 10000초! 거의 2시간~3시간!!

글작성 --> 이메일 발송(3시간..) --> 작성완료
    : 동기적 처리 - 순서대로 처리

글작성 --> 이메일 발송을 예약 --> 작성완료
사용자에게 노출되지 않는 프로그램이 돌아가면서 
예약이 들어가 있을 때에 이메일 발송 작업을 백그라운드에서 실행
--> todo 같은 것
    : 비동기적인 처리 ---> 아주 중요!!

자바스크립트에서는 Ajax (나중에 공부할 것임)
A : asynchronous 비동기 <-> synchronous 동기
j : JS
a : and
x : XML --> 이젠 별로 안 중요

어떤 정보를 전달 --> 페이지 전체를 다시 가져옴(리로드)

어떤 컨텐츠는 해당 웹 페이지에 존재하지 않던 정보들을 일부
서버에 요청해 가져왔기 때문에 가능(알림 등) --> Ajax!

간단한 알림을 동기적인 처리할 경우
알림 하나 여는 것도 모든 작업을 할 수 없이 기다려야 함

demo.html과 datasource.json.js 참고
--> 콜백을 통해서 사용자에게 어떠한 처리를 위임
--> Ajax를 위한 기본적인 로드 처리는 get이 알아서 처리
--> 비지니스 로직은 사용자에게 위임
    --> 함수를 매개변수로 받아서 처리 
    --> get의 결과를 완전히 바꿈