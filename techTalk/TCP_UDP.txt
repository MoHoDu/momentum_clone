1. Transport Layer (전송 계층)
End Point간 신뢰성있는 데이터 전송을 담당하는 계층 
'신뢰성'
 - 데이터를 순차적, 안정적이게 전달
'전송'
 - 포트 번호에 해당하는 프로세스에 데이터를 전달**

만약 전송 계층이 없다면...
 - 데이터의 순차 전송이 원할히 되지 않음 
 [1, 2, 3] --> [2, 3, 1]??
 - Flow(흐름 문제)
   원인 : 송수신자 간의 데이터 처리 속도 차이 
    - 수신자가 처리할 수 있는 데이터량을 초과 --> 누락...
 - Congestion(혼잡 문제)
   원인 : 네트워크의 데이터 처리 속도 (ex. 라우터)
    - 네트워크가 혼잡할 때 --> 송신자가 보낸 데이터가 제대로 이동x

--> 결과적으로 데이터의 손실이 발생!
"Hello Nice to meet you" --데이터 손실-->
"Hell       to      you"

--> TCP 등장

2. TCP (Transmission Control Protocol)
신뢰성있는 데이터 통신을 가능하게 해주는 프로토콜 
특징 : 커넥션을 연결 - 양방향 통신 지향 "3-way-Handshake"

데이터의 순차 전송을 보장하고,
흐름 제어(Flow Control)
혼잡 제어(Congestion Control)
오류 감지(Error Detection) 가능!

세그먼트(Segment) : Application Layer에서 준 데이터를 자잘하게 나눔 
 - 각각을 TCP Header를 Data에 추가하고 이를 세그먼트라고 함

헤더에는 전송에 필요한 포트번호와 (SP/DP) 
순차 전송에 필요한 Sequence number 등이 있음

그리고, 9bit의 Flag Field가 TCP 연결을 제어하고 데이터를 관리함
 - Control Bit라고도 함
9개 중에서 ACK, SYN[신], FIN이 TCP에서 중요
 - SYN : TCP가 커넥션을 연결할 때에 필요
 - ACK : 수신자가 다시 응답할 때 필요
 - FIN : TCP가 연결한 커넥션을 끊어낼 때에 필요

3-way-Handshake (Connection)
클라이언트에서 서버에 연결을 신청하면서 SYN 비트를 1로 설정해서 패킷 송신
서버에서 확인했다는 ACK 1비트와 나도 커넥션하고 싶다는 SYN 1비트로 패킷 송신
클라이언트에서 확인하고 ACK 1비트로 패킷 송신

데이터 전송 방식
클라이언트가 패킷 송신
서버에서 ACK 송신
ACK를 수신하지 못하면 재전송

4-way-Handshake (Connection Close)
데이터를 전부 송신한 클라이언트가 FIN을 송신
서버가 확인하고 ACK 송신
서버에서 남은 패킷 송신 (없을 수도 있지만 잉여 데이터가 존재할 수 있음)
일정 시간 대기 (패킷을 손실없이 모두 받기 위해서) : TIME_WAIT
서버가 FIN 송신
클라이언트가 ACK 송신 - 서버가 상태를 close

문제점이 존재
 - 전송의 신뢰성은 보장하지만 매번 커넥션을 연결해서 시간 손실이 발생한다.
   (3-way-Handshake)
 - 패킷을 조금만 손실해도 재전송
   (손실과 비손실의 격차가 거의 없거나 중요하지 않은 경우 불필요)

3. UDP (User Datagram Protocol)
TCP보다 신뢰성이 떨어지지만 전송 속도가 일반적으로 빠른 프로토콜 
 - 왜냐면, 흐름 제어나 순차 전송 그리고, 혼잡 제어가 없어서

Connectionless 
 - 3-way-Handshake가 없다. 

Error Detection
 - 에러만 검출

비교적 데이터의 신뢰성이 중요하지 않을 때에 사용
 - 영상 스트리밍
 - 오디오 스트리밍

TCP는 세그먼트가 내부에서 동작한다면 User Datagram이 작동한다 
Data를 UDP Header를 더함 
<--> TCP와 다르게 원본 데이터를 쪼개지 않는다. 
--> 그래서 이후 애플리케이션에서 따로 쪼개는 작업이 필요

UDP Header 
TCP 헤더처럼 복잡하지 않음 
 - 포트 번호 (SP/DP)    
 - 에러검출을 위한 Checksum (16bit)

데이터 전송 방식
커넥션이 없기 때문에 복잡한 방식 없이 클라이언트가 그냥 패킷을 전송 
이로 인해 누락이 일어나는 경우가 있음 

4. 중요한 점
1. TCP, UCP의 특성을 파악하고 상황에 따라서 적절한 프로토콜을 사용할 수 
   있어야 한다. 
2. TCP, UDP의 헤더에 대해 파악하고 성능 개선에 이용할 수 있어야 한다. 